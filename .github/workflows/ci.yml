name: Hello World API CI

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]

jobs:
  ci:
    permissions:
      id-token: write
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        id: lint
        continue-on-error: true
        run: npm run lint

      - name: Run lint:fix if lint failed
        if: steps.lint.outcome == 'failure'
        run: npm run lint:fix # Simulate linting errors fix

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: colintran2205/hello-world-api

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      - name: Authenticate to Google Cloud
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: "Build Docker Image"
        id: build
        run: |
          BASE_URL="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.AR_REPO_NAME }}/${{ secrets.CLOUDRUN_SERVICE_NAME }}"
          VERSION_NUMBER="${GITHUB_REF#refs/tags/}"
          VERSION_TAG="${BASE_URL}:${VERSION_NUMBER}"
          LATEST_TAG="${BASE_URL}:latest"

          docker build \
            --tag "${VERSION_TAG}" \
            --tag "${LATEST_TAG}" \
            .

          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.build.outputs.latest_tag }}"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: "Push Docker Image to Artifact Registry"
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
          docker push ${{ steps.build.outputs.latest_tag }}
          docker push ${{ steps.build.outputs.version_tag }}

  cd:
    runs-on: ubuntu-latest
    needs: ci
    permissions:
      contents: "read"
      id-token: "write"
    env:
      IMAGE_NAME: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.AR_REPO_NAME }}/${{ secrets.CLOUDRUN_SERVICE_NAME }}:latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@main"
        with:
          version: ">= 363.0.0"

      - name: Google Cloud Run deployment
        run: |
          gcloud run deploy ${{ secrets.CLOUDRUN_SERVICE_NAME }} \
            --image="${{ env.IMAGE_NAME }}" \
            --platform=managed \
            --allow-unauthenticated \
            --port="3000" \
            --liveness-probe=httpGet.path=/health,timeoutSeconds=10,httpGet.port=3000 \
            --cpu=1 --memory="512Mi" \
            --min-instances=1 --max-instances=3 \
            --region=${{ secrets.GCP_REGION }}

      - name: Route traffic to latest revision
        run: |
          gcloud run services update-traffic ${{ secrets.CLOUDRUN_SERVICE_NAME }} \
            --region=${{ secrets.GCP_REGION }} \
            --to-latest
